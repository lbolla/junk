(declaim (optimize (speed 3) (safety 0) (debug 0)))

(defparameter *tmp1* (make-alien mpz-struct))
(defparameter *tmp2* (make-alien mpz-struct))
(defparameter *num* (make-alien mpz-struct))
(defparameter *acc* (make-alien mpz-struct))
(defparameter *den* (make-alien mpz-struct))

(defun cleanup ()
  (free-alien *tmp1*)
  (free-alien *tmp2*)
  (free-alien *num*)
  (free-alien *acc*)
  (free-alien *den*))

(defun extract-digit ()
  (if (> (mpz-cmp *num* *acc*) 0)
	-1
	(progn
	  (mpz-mul-2exp *tmp1* *num* 1)
	  (mpz-add *tmp1* *tmp1* *num*)
	  (mpz-add *tmp1* *tmp1* *acc*)
	  (mpz-fdiv-qr *tmp1* *tmp2* *tmp1* *den*)
	  (mpz-add *tmp2* *tmp2* *num*)
	  (if (>= (mpz-cmp *tmp2* *den*) 0)
		-1
		(mpz-get-ui *tmp1*)))))

(defun next-term (k)
  (let ((y2 (1+ (* 2 k))))
	  (mpz-mul-2exp *tmp1* *num* 1)
	  (mpz-add *acc* *acc* *tmp1*)
	  (mpz-mul-ui *acc* *acc* y2)
	  (mpz-mul-ui *num* *num* k)
	  (mpz-mul-ui *den* *den* y2)))

(defun eliminate-digit (d)
  (mpz-submul-ui *acc* *den* d)
  (mpz-mul-ui *acc* *acc* 10)
  (mpz-mul-ui *num* *num* 10))

(defun pidigits (n)
  (let ((d 0)
		(k 0)
		(i 0)
		(m 0))
	(mpz-init *tmp1*)
	(mpz-init *tmp2*)
	(mpz-init-set-ui *num* 1)
	(mpz-init-set-ui *acc* 0)
	(mpz-init-set-ui *den* 1)
	(loop
	  (loop
		(incf k)
		(next-term k)
		(setf d (extract-digit))
		(unless (= d -1)
		  (return)))
	  (format t "~A" d)
	  (incf i)
	  (setf m (rem i 10))
	  (when (= m 0)
		(format t "   :~A~%" i))
	  (when (>= i n)
		(return))
	  (eliminate-digit d))
	(unless (= m 0)
	  (format t "   :~A~%" n))))

(defun main ()
  (pidigits 2000)
  (cleanup))

