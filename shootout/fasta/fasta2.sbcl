;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/
;;
;; Contributed by Lorenzo Bolla

(declaim (optimize (speed 3) (debug 0) (safety 0)))

(declaim (fixnum +line-length+))
(defconstant +line-length+ 60)

(declaim (type fixnum +lookup-size+))
(defconstant +lookup-size+ 1000)

(declaim (base-string *alu*))
(defparameter *alu* (concatenate 'base-string
								 "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"
								 "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"
								 "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"
								 "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"
								 "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"
								 "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"
								 "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA"))

(defstruct amino-acid
  (sym #\Space :type character)
  (prob 0.0 :type single-float)
  (cprob 0.0 :type single-float))

(defparameter *amino-acids*
  (let ((c 0.0))
	(declare (type single-float c))
	(the (simple-array amino-acid (*))
		 (make-array 15
					 :element-type 'amino-acid
					 :initial-contents (mapcar 
										 #'(lambda (s p) (make-amino-acid :sym s :prob p :cprob (incf c (the single-float p))))
										 '(#\a #\c #\g #\t #\B #\D #\H #\K #\M #\N #\R #\S #\V #\W #\Y)
										 '(0.27 0.12 0.12 0.27 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02))))))

(defparameter *homo-sapiens*
  (let ((c 0.0))
	(declare (type single-float c))
	(the (simple-array amino-acid (*))
		 (make-array 4
					 :element-type 'amino-acid
					 :initial-contents (mapcar 
										 #'(lambda (s p) (make-amino-acid :sym s :prob p :cprob (incf c (the single-float p))))
										 '(#\a #\c #\g #\t)
										 '(0.3029549426680 0.1979883004921 0.1975473066391 0.3015094502008))))))

#+nil
(let ((r 42)
	  (im 139968)
	  (ia 3877)
	  (ic 29573))
  (declare (type fixnum r im ia ic))
  (defun reset-random () (setf r (the fixnum 42)))
  (declaim (inline next-random))
  (defun next-random ()
	(/ (float (setf r (mod (+ (* r ia) ic) im))) im)))

(declaim (type fixnum r im ia ic)
		 (type single-float im^-1))
(defparameter r 42)
(defparameter im 139968)
(defparameter im^-1 (/ 1.0 139968))
(defparameter ia 3877)
(defparameter ic 29573)
(defun reset-random () (setf r (the fixnum 42)))
(declaim (inline next-random))
(defun next-random ()
  (setf r (mod (the fixnum (+ (the fixnum (* r ia)) ic)) im))
  (* r im^-1))

#+nil
(defun find-amino-acid (amino-acids p)
  (declare (type single-float p)
		   (type (simple-array amino-acid (*)) amino-acids))
  (labels ((rec (p amino-acids i j)
				(declare (type fixnum i j))
				(if (<= j i)
				  (svref amino-acids i)
				  (let ((mid (ash (+ i j) -1)))
					(cond ((< p (amino-acid-cprob (svref amino-acids mid)))
						   (rec p amino-acids i mid))
						  (t
							(rec p amino-acids (1+ mid) j)))))))
	(rec p amino-acids 0 (1- (length amino-acids)))))

(defun find-amino-acid (amino-acids p)
  (declare (type single-float p)
		   (type (simple-array amino-acid (*)) amino-acids))
  (let* ((i 0)
		 (j (length amino-acids)))
	(loop
	  (let* ((mid (ash (+ i j) -1))
			 (a (svref amino-acids mid)))
		(when (<= j i) 
		  (return a))
		(cond ((< p (amino-acid-cprob a))
			   (setf j mid))
			  (t
				(setf i (1+ mid))))))))

#+nil
(defun find-amino-acid (amino-acids p)
  (declare (type single-float p)
		   (type (simple-array amino-acid (*)) amino-acids))
  (svref (get-lookup amino-acids) (floor (* p +lookup-size+))))

#+nil
(declaim (type (simple-array amino-acid (*)) *lookup*))
#+nil
(defvar *lookup* nil)

#+nil
(defun get-lookup (amino-acids)
  (or *lookup* (setf *lookup* (make-lookup amino-acids))))
	
#+nil
(defun make-lookup (amino-acids)
  (format t "making lookup")
  (let ((lookup '())
		(j 0))
	(dotimes (i +lookup-size+)
	  (loop 
		(if (< (* +lookup-size+ (amino-acid-cprob (svref amino-acids j))) i)
		  (incf j)
		  (return)))
	  (push (svref amino-acids j) lookup))
	(make-array +lookup-size+ :element-type 'amino-acid :initial-contents lookup)))

(declaim (inline output-line flush))
(defun output-line (line &key (start 0) (end nil))
  (write-line line sb-sys:*stdout* :start start :end end))
(defun flush ()
  (finish-output sb-sys:*stdout*))

(defconstant +buffer-size+ 30000)

(defun randomize (amino-acids title n)
  (declare (type fixnum n))
  (write-string title sb-sys:*stdout*)
  (let ((buf (make-string +buffer-size+))
		(j 0)
		(z 0))
	(declare (type fixnum j)
			 (type simple-string buf))
	(dotimes (i n)
	  (declare (type fixnum i))
	  (setf z (mod i +buffer-size+))
	  (when (= (the fixnum 0) z)
		(write-string buf sb-sys:*stdout*)
		(setf z (the fixnum 0)))
	  (setf j (mod i +line-length+))
	  (if (= (the fixnum 0) j)
		(progn
		  (setf (aref buf z) #\Newline)
		  (setf z (the fixnum 0))) 
		(setf (aref buf z) (amino-acid-sym (find-amino-acid amino-acids (next-random))))))
	(write-string buf sb-sys:*stdout* :start 0 :end z)))

(defun repeat (alu title n)
  (declare (type base-string alu) 
		   (type fixnum n))
  (let ((len (length alu))
		(buf (concatenate 'base-string 
						  alu 
						  (subseq alu 0 +line-length+))))
	(declare (type fixnum len) 
			 (type base-string buf))
	(output-line title)
	(do* ((pos-start 0 (mod pos-end len))
		  (m n (- m bytes))
		  (bytes (min n +line-length+) (min m +line-length+))
		  (pos-end (+ pos-start bytes) (+ pos-start bytes)))
	  ((<= m 0) (flush))
	  (declare (type fixnum pos-start pos-end m bytes))
	  (output-line buf :start pos-start :end pos-end))))

(defun main (&optional in-n)
  (let ((n (or in-n
			   (ignore-errors
				 (parse-integer (car (last #+sbcl sb-ext:*posix-argv*
										   #+cmu  extensions:*command-line-strings*
										   #+gcl  si::*command-args*
										   #+clisp nil))))
			   1000)))
	(declare (fixnum n))
	(reset-random)
	(repeat *alu* ">ONE Homo sapiens alu" (the fixnum (* n 2)))
	; (randomize *amino-acids* ">TWO IUB ambiguity codes" (the fixnum (* n 3)))
	; (randomize *homo-sapiens* ">THREE Home sapiens frequency" (the fixnum (* n 5)))))
	))
